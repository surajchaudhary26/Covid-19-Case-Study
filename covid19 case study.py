# -*- coding: utf-8 -*-
"""Covid19_by_Suraj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T-cfMZgpIGvwzA8_YQqnGzizcOoXGaDR
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/Covid_19.csv')
df.head()

from google.colab import drive
drive.mount('/content/drive')

df.shape

df.info()

df.rename(columns={
    "Province/State":"State",
    "Country/Region":"Country"},inplace=True)
df

df['Date'].value_counts()

df['Date'].max()

top_date=df[df['Date']=='2020-07-27']

top_date.head(10)

top_date.groupby(['Country'])[['Confirmed','Deaths','Recovered','Active']].sum().reset_index()

confirmed_cases=df.groupby(['Date'])['Confirmed'].sum().reset_index()
confirmed_cases

plt.figure(figsize=(20,5))
sns.lineplot(data=confirmed_cases,x='Date',y='Confirmed')
plt.xlabel('Dates')
plt.ylabel('Confirmed')
plt.show()

# from sujeet nag to everyone:    8:42 PM
death_cases = df.groupby(['Date'])['Deaths'].sum().reset_index()
death_cases

plt.figure(figsize=(20,5))
sns.lineplot(data=death_cases,x='Date',y='Deaths')
plt.xlabel('Dates')
plt.ylabel('Deaths')
plt.show()

# from Vibhor Mittal to everyone:    8:44 PM
recovered_cases = df.groupby(['Date'])['Recovered'].sum().reset_index()
recovered_cases

plt.figure(figsize=(20,5))
sns.lineplot(data=recovered_cases,x='Date',y='Recovered')
plt.xlabel('Dates')
plt.ylabel('Recovered')
plt.show()

# from Manish Mohan to everyone:    8:46 PM
active_cases=df.groupby(['Date'])['Active'].sum().reset_index()
active_cases

plt.figure(figsize=(20,5))
sns.lineplot(data=active_cases,x='Date',y='Active')
plt.xlabel('Dates')
plt.ylabel('Active')
plt.show()

plt.figure(figsize=(20,5))
sns.pointplot(data=confirmed_cases,x='Date',y='Confirmed',color='Red')
sns.pointplot(data=death_cases,x='Date',y='Deaths',color='Blue')
sns.pointplot(data=active_cases,x='Date',y='Active',color='Yellow')
sns.pointplot(data=recovered_cases,x='Date',y='Recovered',color='Green')
# plt.xlabel('Dates')
# plt.ylabel('Recovered')
plt.show()

# top3 effected countries
# 1.us
# 2.china
# 3.india

US=df[df['Country']=='US']
US

US=US.groupby(['Date'])[['Confirmed','Deaths','Recovered','Active']].sum().reset_index()
US

# from Puneet to everyone:    9:02 PM
China = df[df['Country']=='China']
China.head()

China=China.groupby(['Date'])[['Confirmed','Deaths','Recovered','Active']].sum().reset_index()
China

# from Inderjeet Singh to everyone:    9:04 PM
India = df[df['Country'] == 'India']
India = India.groupby(['Date'])[['Confirmed', 'Deaths', 'Recovered', 'Active']].sum().reset_index()
India

plt.figure(figsize=(20,5))
sns.pointplot(data=US,x='Date',y='Confirmed',color='Red')
sns.pointplot(data=China,x='Date',y='Confirmed',color='Blue')
sns.pointplot(data=India,x='Date',y='Confirmed',color='Yellow')

plt.ylabel('no of confirmed Cases')
plt.xlabel('Dates')
plt.show()

plt.figure(figsize=(20,5))
sns.pointplot(data=US,x='Date',y='Recovered',color='Red')
sns.pointplot(data=China,x='Date',y='Recovered',color='Blue')
sns.pointplot(data=India,x='Date',y='Recovered',color='Yellow')

plt.ylabel('no of Recovered Cases')
plt.xlabel('Dates')
plt.show()

plt.figure(figsize=(20,5))
sns.pointplot(data=US,x='Date',y='Active',color='Red')
sns.pointplot(data=China,x='Date',y='Active',color='Blue')
sns.pointplot(data=India,x='Date',y='Active',color='Yellow')

plt.ylabel('no of Active Cases')
plt.xlabel('Dates')
plt.show()

plt.figure(figsize=(20,5))
sns.pointplot(data=US,x='Date',y='Deaths',color='Red')
sns.pointplot(data=China,x='Date',y='Deaths',color='Blue')
sns.pointplot(data=India,x='Date',y='Deaths',color='Yellow')

plt.ylabel('no of Deaths Cases')
plt.xlabel('Dates')
plt.show()

"""# Model Bulding"""

# Intalling prophet
!pip install prophet

'''
Prophet is a time series forecasting tool developed by Facebook that’s designed to be easy to use and effective for a wide range
of time series data. It’s particularly useful for data that has strong seasonal effects (like daily or weekly patterns) and includes
important dates or events that can impact the forecast.
'''


# be back by 9:50

# the columns names should me ds and y and its madatory
confirmed_cases=df.groupby(['Date']).sum()['Confirmed'].reset_index()

confirmed_cases.columns=['ds','y']
confirmed_cases

from prophet import Prophet

model=Prophet()

model.fit(confirmed_cases)

future=model.make_future_dataframe(periods=7)
forcasted=model.predict(future)
forcasted

'''
ds:
This column contains the dates for which the predictions have been made. It stands for "date stamp."

yhat:
This is the predicted value (forecast) for the given date in the ds column. It represents the model's best estimate for that point in time.

yhat_upper:
This column represents the upper bound of the predicted value, which indicates the higher end of the confidence interval.
It suggests that the actual value is unlikely to exceed this amount, giving you an idea of the prediction's uncertainty.

yhat_lower:
This column represents the lower bound of the predicted value, indicating the lower end of the confidence interval. It suggests that the actual value is unlikely to be lower than this amount.
'''

forcasted[['yhat_lower','yhat','yhat_upper']]

model.plot(forcasted)
plt.show()

# from Manish Mohan to everyone:    10:10 PM
recovered_cases.columns=['ds','y']
# recovered_cases
model_recovered=Prophet()
model_recovered.fit(recovered_cases)
future=model_recovered.make_future_dataframe(periods=7)
forcasted=model_recovered.predict(future)
forcasted

# from Manish Mohan to everyone:    10:10 PM
active_cases.columns=['ds','y']
# recovered_cases
model_active=Prophet()
model_active.fit(active_cases)
future=model_active.make_future_dataframe(periods=7)
forcasted=model_active.predict(future)
forcasted

# from Manish Mohan to everyone:    10:10 PM
death_cases.columns=['ds','y']
# recovered_cases
model_death=Prophet()
model_death.fit(death_cases)
future=model_death.make_future_dataframe(periods=7)
forcasted=model_death.predict(future)
forcasted

import plotly

import plotly.express as px

world=df.groupby(['Country'])[['Confirmed','Active','Deaths','Recovered']].sum().reset_index()
world

figure=px.choropleth(world,locations='Country',locationmode='country names',color='Active',hover_name='Country',range_color=[1,100000],color_continuous_scale='reds',title='World map for the Active cases')
figure.show()

